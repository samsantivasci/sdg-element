#!/usr/bin/env node

// this runs when we are executing locally via npx
// this way we don't get multiple windows opening per port update
"use strict";

function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
process.env.HAXCMS_DISABLE_JWT_CHECKS = true;
const port = process.env.PORT || 3000;
require('./app.js');
async function go() {
  const openPkg = await Promise.resolve().then(() => _interopRequireWildcard(require('open')));
  const open = openPkg.default;
  // opens the url in the default browser 
  open(`http://localhost:${port}`);
}
go();