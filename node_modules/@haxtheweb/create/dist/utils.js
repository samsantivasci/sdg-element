"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SITE_FILE_NAME = void 0;
exports.dashToCamel = dashToCamel;
exports.generateUUID = generateUUID;
exports.readAllFiles = readAllFiles;
var fs = _interopRequireWildcard(require("node:fs"));
var path = _interopRequireWildcard(require("node:path"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const SITE_FILE_NAME = exports.SITE_FILE_NAME = "site.json";

/**
 * Helper to convert dash to camel; important when reading attributes.
 */
function dashToCamel(str) {
  return str.replace(/-([a-z0-9])/g, function (g) {
    return g[1].toUpperCase();
  });
}
// generate unique-enough id
function generateUUID() {
  return "ss-s-s-s-sss".replace(/s/g, _uuidPart);
}
function _uuidPart() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}

// read in all files recursively for rewriting
function* readAllFiles(dir) {
  const files = fs.readdirSync(dir, {
    withFileTypes: true
  });
  for (const file of files) {
    if (file.isDirectory()) {
      yield* readAllFiles(path.join(dir, file.name));
    } else {
      yield path.join(dir, file.name);
    }
  }
}